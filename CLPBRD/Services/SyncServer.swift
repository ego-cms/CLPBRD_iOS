import Foundation


class SyncServer: ClipboardSyncServerService {
    /// URL of running HTTP server if any
    var serverURL: URL? {
        return nil
    }
    
    /// Starts the HTTP server on this port and WebSocket server on autogenerated port
    /// Should be idempotent, i.e. you can call it twice without problems
    func start(port: UInt) {
        
    }
    
    /// Stops the servers
    func stop() {
        
    }
    
    /// Current state of the server
    private(set) var state: ServerState = .off
    
    /// Called when state changes
    var onStateChanged: (ServerState) -> Void = { _ in }
    
    /// Called when some of the clients
    var onUpdatesReceived: (Void) -> Void = { }
    
    /// Store updates in clipboard and send them to all other clients (except the one which sent original updates)
    func takeUpdates() {
        
    }
    
    private var httpServerService: HTTPServerService
    private var webSocketServerService: WebSocketServerService
    private var clipboardProviderService: ClipboardProviderService
    private var appStateService: AppStateService
    
    init(
        httpServerService: HTTPServerService,
        webSocketServerService: WebSocketServerService,
        clipboardProviderService: ClipboardProviderService,
        appStateService: AppStateService
    ) {
        self.httpServerService = httpServerService
        self.webSocketServerService = webSocketServerService
        self.clipboardProviderService = clipboardProviderService
        self.appStateService = appStateService
    }
}
